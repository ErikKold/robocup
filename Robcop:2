#LEGO MINDSTORM ROBOT PROGRAM
# This program requires LEGO EV3 MicroPython v2.0 or higher.
# Click "Open user guide" on the EV3 extension tab for more information.

from pybricks.hubs import EV3Brick
from pybricks.ev3devices import (Motor, TouchSensor, ColorSensor, InfraredSensor, UltrasonicSensor, GyroSensor)
from pybricks.parameters import Port, Stop, Direction, Button, Color
from pybricks.tools import wait, StopWatch, DataLog
from pybricks.robotics import DriveBase
from pybricks.media.ev3dev import SoundFile, ImageFile

ev3=EV3Brick() #EV3 initialized
left_motor = Motor(Port.B) #Left motor in port B
right_motor = Motor(Port.C) #Right motor in port C
line_sensor = ColorSensor(Port.S3) #Line sensor in port 3
claw_motor = Motor(Port.A, Direction.COUNTERCLOCKWISE) #Claw motor in port A
ultra_sensor = UltrasonicSensor(Port.S4) #Ultra sound sensor in port 4
gyro_sensor = GyroSensor(Port.S1) #Gyro sensor in port 1

#grey: -5 10
#white 30 55
#black -45 -35

#sekvens
sekvens = 0

# Initialize the drive base.
robot = DriveBase(left_motor, right_motor, wheel_diameter=54, axle_track=200)
#BLACK = -35
#WHITE = 35
threshold = 3

def follow_line():
    # Set the gain of the proportional line controller. This means that for every
    # percentage point of light deviating from the threshold, we set the turn
    # rate of the drivebase to 1.2 degrees per second.

    # Set the drive speed at 100 millimeters per second.
    DRIVE_SPEED = 100

    # Set the gain of the proportional line controller. This means that for every
    # percentage point of light deviating from the threshold, we set the turn
    # rate of the drivebase to 1.2 degrees per second.

    # For example, if the light value deviates from the threshold by 10, the robot
    # steers at 10*1.2 = 12 degrees per second.
    PROPORTIONAL_GAIN = 1.2

    # Start following the line endlessly.
    while True:
        # Calculate the deviation from the threshold.
        deviation = line_sensor.reflection() - threshold

        # Calculate the turn rate.
        turn_rate = PROPORTIONAL_GAIN * deviation

        # Set the drive base speed and turn rate.
        robot.drive(DRIVE_SPEED, turn_rate)

        if line_sensor.reflection() < -35:
            robot.drive(DRIVE_SPEED, 0)
            break

def find_line_1():

    DRIVE_SPEED = 100 #Set drive speed to 100 millimeters pr second
    turn_rate = 0 #Set turn rate to 0 

    if line_sensor.reflection > 95: #The linesensor recieves over 95% of the light it emits
        robot.turn(45) #Robotten drejer 45 grader

        #Når gyroskopen måler, vi er drejet 45 grader, kører robotten vider
        if gyro_sensor.angle == 45: 
            robot.drive(DRIVE_SPEED, turn_rate)

    #Robotten når nu den næste linje, og hopper derfor ud af funktionen
    elif line_sensor.reflection < 95:
        return 0

def find_line_2():
    DRIVE_SPEED = 100 #Set drive speed to 100 millimeters pr second
    turn_rate = 0 #Set turn rate to 0 

    if line_sensor.reflection > 95:
        robot.turn(-45)

        if gyro_sensor.angel == 45:
            robot.drive(DRIVE_SPEED, turn_rate)
    
    elif line_sensor.reflection < 95:
        return 0

def turn_90():
    robot.turn(90)
    if gyro_sensor.angle == 90:
        return 0

def find_flask():
    follow_line()
    if ultra_sensor.distance == 30:
        return 0

def pick_up():
    claw_motor.run_until_stalled(100, then=stop.HOLD, duty_limit=50)

def sekvens_0():
    follow_line()

def sekvens_1():
    find_line_1()
    follow_line()

def sekvens_2():
    find_line_2()
    follow_line()

def sekvens_3():
    turn_90()
    find_flask()

if sekvens == 0:
    sekvens_0()
    sekvens += 1

if sekvens == 1:
    sekvens_1()
    sekvens += 1

elif sekvens == 2:
    sekvens_2()
    sekvens += 1

elif sekvens == 3:
    sekvens_3()
    sekvens += 1
